{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 718,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# load libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "import datetime\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import xgboost as xgb\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "pd.set_option('display.max_colwidth',100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 719,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def RMSLE(y, pred):\n",
    "    return mean_squared_error(y, pred)**0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 720,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def find_nan_cols(train_df):\n",
    "    nan_cols = []\n",
    "    for col in train_df.columns:\n",
    "        if(sum(pd.isnull(train_df[col]))>0):\n",
    "            nan_cols.append(col)\n",
    "    return nan_cols        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 721,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#load data\n",
    "demographics = pd.read_csv('train/demographics.csv')\n",
    "event_calender = pd.read_csv('train/event_calendar.csv')\n",
    "historical_volume = pd.read_csv('train/historical_volume.csv')\n",
    "industry_soda_sales = pd.read_csv('train/industry_soda_sales.csv')\n",
    "industry_volume = pd.read_csv('train/industry_volume.csv')\n",
    "price_sales_promotion = pd.read_csv('train/price_sales_promotion.csv')\n",
    "weather = pd.read_csv('train/weather.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sku_recommendation = pd.read_csv('test/sku_recommendation.csv')\n",
    "volume_forecast = pd.read_csv('test/volume_forecast.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency</th>\n",
       "      <th>SKU</th>\n",
       "      <th>YearMonth</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Agency_22</td>\n",
       "      <td>SKU_01</td>\n",
       "      <td>201301</td>\n",
       "      <td>52.272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Agency_22</td>\n",
       "      <td>SKU_02</td>\n",
       "      <td>201301</td>\n",
       "      <td>110.700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Agency     SKU  YearMonth   Volume\n",
       "0  Agency_22  SKU_01     201301   52.272\n",
       "1  Agency_22  SKU_02     201301  110.700"
      ]
     },
     "execution_count": 723,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "historical_volume.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 724,
   "metadata": {},
   "outputs": [],
   "source": [
    "sku_agg = historical_volume.groupby(['SKU']). \\\n",
    "    agg({'Volume' : [np.min,np.mean,np.max]}).reset_index()\n",
    "sku_agg.columns = ['SKU', 'min_Volume_SKU', 'mean_Volume_SKU', 'max_Volume_SKU']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SKU</th>\n",
       "      <th>min_Volume_SKU</th>\n",
       "      <th>mean_Volume_SKU</th>\n",
       "      <th>max_Volume_SKU</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SKU_01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3194.051328</td>\n",
       "      <td>22126.6050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SKU_02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2208.376728</td>\n",
       "      <td>17624.5200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SKU_03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1845.716049</td>\n",
       "      <td>22526.6100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SKU_04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1188.229987</td>\n",
       "      <td>8665.6725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SKU_05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1259.238693</td>\n",
       "      <td>10583.6325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      SKU  min_Volume_SKU  mean_Volume_SKU  max_Volume_SKU\n",
       "0  SKU_01             0.0      3194.051328      22126.6050\n",
       "1  SKU_02             0.0      2208.376728      17624.5200\n",
       "2  SKU_03             0.0      1845.716049      22526.6100\n",
       "3  SKU_04             0.0      1188.229987       8665.6725\n",
       "4  SKU_05             0.0      1259.238693      10583.6325"
      ]
     },
     "execution_count": 725,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sku_agg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 726,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "agency_agg = historical_volume.groupby(['Agency']). \\\n",
    "    agg({'Volume' : [np.min,np.mean,np.max]}).reset_index()\n",
    "agency_agg.columns = ['Agency', 'min_Volume_Agency', 'mean_Volume_Agency', 'max_Volume_Agency']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 727,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency</th>\n",
       "      <th>min_Volume_Agency</th>\n",
       "      <th>mean_Volume_Agency</th>\n",
       "      <th>max_Volume_Agency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Agency_01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>70.175700</td>\n",
       "      <td>514.7145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Agency_02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4033.935444</td>\n",
       "      <td>22526.6100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Agency_03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2610.920059</td>\n",
       "      <td>13354.3650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Agency_04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>146.252602</td>\n",
       "      <td>938.6370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Agency_05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2174.659879</td>\n",
       "      <td>22126.6050</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Agency  min_Volume_Agency  mean_Volume_Agency  max_Volume_Agency\n",
       "0  Agency_01                0.0           70.175700           514.7145\n",
       "1  Agency_02                0.0         4033.935444         22526.6100\n",
       "2  Agency_03                0.0         2610.920059         13354.3650\n",
       "3  Agency_04                0.0          146.252602           938.6370\n",
       "4  Agency_05                0.0         2174.659879         22126.6050"
      ]
     },
     "execution_count": 727,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agency_agg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 728,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "agency_sku_agg = historical_volume.groupby(['Agency', 'SKU']). \\\n",
    "    agg({'Volume' : [np.min,np.mean,np.max]}).reset_index()\n",
    "agency_sku_agg.columns = ['Agency', 'SKU', 'min_Volume_SKU_Agency', 'mean_Volume_SKU_Agency', 'max_Volume_SKU_Agency']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency</th>\n",
       "      <th>SKU</th>\n",
       "      <th>min_Volume_SKU_Agency</th>\n",
       "      <th>mean_Volume_SKU_Agency</th>\n",
       "      <th>max_Volume_SKU_Agency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Agency_01</td>\n",
       "      <td>SKU_01</td>\n",
       "      <td>4.3200</td>\n",
       "      <td>83.523600</td>\n",
       "      <td>180.7920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Agency_01</td>\n",
       "      <td>SKU_02</td>\n",
       "      <td>17.1720</td>\n",
       "      <td>66.898800</td>\n",
       "      <td>171.3960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Agency_01</td>\n",
       "      <td>SKU_03</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>40.777465</td>\n",
       "      <td>106.6806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Agency_01</td>\n",
       "      <td>SKU_04</td>\n",
       "      <td>15.2082</td>\n",
       "      <td>191.208123</td>\n",
       "      <td>514.7145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Agency_01</td>\n",
       "      <td>SKU_05</td>\n",
       "      <td>11.4750</td>\n",
       "      <td>20.484120</td>\n",
       "      <td>40.3209</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Agency     SKU  min_Volume_SKU_Agency  mean_Volume_SKU_Agency  \\\n",
       "0  Agency_01  SKU_01                 4.3200               83.523600   \n",
       "1  Agency_01  SKU_02                17.1720               66.898800   \n",
       "2  Agency_01  SKU_03                 0.0000               40.777465   \n",
       "3  Agency_01  SKU_04                15.2082              191.208123   \n",
       "4  Agency_01  SKU_05                11.4750               20.484120   \n",
       "\n",
       "   max_Volume_SKU_Agency  \n",
       "0               180.7920  \n",
       "1               171.3960  \n",
       "2               106.6806  \n",
       "3               514.7145  \n",
       "4                40.3209  "
      ]
     },
     "execution_count": 729,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "agency_sku_agg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 730,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "train_df = pd.merge(historical_volume, demographics, on='Agency', how='left')\n",
    "train_df = pd.merge(train_df, event_calender, on='YearMonth', how='left')\n",
    "train_df = pd.merge(train_df, agency_agg, on='Agency', how='left')\n",
    "train_df = pd.merge(train_df, sku_agg, on='SKU', how='left')\n",
    "# train_df = pd.merge(train_df, agency_sku_agg, on=['Agency', 'SKU'], how='left')\n",
    "\n",
    "# train_df = pd.merge(train_df, industry_soda_sales, on='YearMonth', how='left')\n",
    "# train_df = pd.merge(train_df, industry_volume, on='YearMonth', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 731,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency</th>\n",
       "      <th>SKU</th>\n",
       "      <th>YearMonth</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Avg_Population_2017</th>\n",
       "      <th>Avg_Yearly_Household_Income_2017</th>\n",
       "      <th>Easter Day</th>\n",
       "      <th>Good Friday</th>\n",
       "      <th>New Year</th>\n",
       "      <th>Christmas</th>\n",
       "      <th>...</th>\n",
       "      <th>FIFA U-17 World Cup</th>\n",
       "      <th>Football Gold Cup</th>\n",
       "      <th>Beer Capital</th>\n",
       "      <th>Music Fest</th>\n",
       "      <th>min_Volume_Agency</th>\n",
       "      <th>mean_Volume_Agency</th>\n",
       "      <th>max_Volume_Agency</th>\n",
       "      <th>min_Volume_SKU</th>\n",
       "      <th>mean_Volume_SKU</th>\n",
       "      <th>max_Volume_SKU</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Agency_22</td>\n",
       "      <td>SKU_01</td>\n",
       "      <td>201301</td>\n",
       "      <td>52.2720</td>\n",
       "      <td>48151</td>\n",
       "      <td>132110</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.1318</td>\n",
       "      <td>143.650922</td>\n",
       "      <td>425.0628</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3194.051328</td>\n",
       "      <td>22126.6050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Agency_22</td>\n",
       "      <td>SKU_02</td>\n",
       "      <td>201301</td>\n",
       "      <td>110.7000</td>\n",
       "      <td>48151</td>\n",
       "      <td>132110</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.1318</td>\n",
       "      <td>143.650922</td>\n",
       "      <td>425.0628</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2208.376728</td>\n",
       "      <td>17624.5200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Agency_58</td>\n",
       "      <td>SKU_23</td>\n",
       "      <td>201301</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1620969</td>\n",
       "      <td>105857</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1771.901852</td>\n",
       "      <td>10246.0650</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.884812</td>\n",
       "      <td>18.9900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Agency_48</td>\n",
       "      <td>SKU_07</td>\n",
       "      <td>201301</td>\n",
       "      <td>28.3200</td>\n",
       "      <td>1739969</td>\n",
       "      <td>210213</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1997.797814</td>\n",
       "      <td>13462.3950</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33.140397</td>\n",
       "      <td>202.6650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Agency_22</td>\n",
       "      <td>SKU_05</td>\n",
       "      <td>201301</td>\n",
       "      <td>238.5387</td>\n",
       "      <td>48151</td>\n",
       "      <td>132110</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.1318</td>\n",
       "      <td>143.650922</td>\n",
       "      <td>425.0628</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1259.238693</td>\n",
       "      <td>10583.6325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Agency     SKU  YearMonth    Volume  Avg_Population_2017  \\\n",
       "0  Agency_22  SKU_01     201301   52.2720                48151   \n",
       "1  Agency_22  SKU_02     201301  110.7000                48151   \n",
       "2  Agency_58  SKU_23     201301    0.0000              1620969   \n",
       "3  Agency_48  SKU_07     201301   28.3200              1739969   \n",
       "4  Agency_22  SKU_05     201301  238.5387                48151   \n",
       "\n",
       "   Avg_Yearly_Household_Income_2017  Easter Day  Good Friday  New Year  \\\n",
       "0                            132110           0            0         1   \n",
       "1                            132110           0            0         1   \n",
       "2                            105857           0            0         1   \n",
       "3                            210213           0            0         1   \n",
       "4                            132110           0            0         1   \n",
       "\n",
       "   Christmas       ...        FIFA U-17 World Cup  Football Gold Cup  \\\n",
       "0          0       ...                          0                  0   \n",
       "1          0       ...                          0                  0   \n",
       "2          0       ...                          0                  0   \n",
       "3          0       ...                          0                  0   \n",
       "4          0       ...                          0                  0   \n",
       "\n",
       "   Beer Capital  Music Fest  min_Volume_Agency  mean_Volume_Agency  \\\n",
       "0             0           0            23.1318          143.650922   \n",
       "1             0           0            23.1318          143.650922   \n",
       "2             0           0             0.0000         1771.901852   \n",
       "3             0           0             0.0000         1997.797814   \n",
       "4             0           0            23.1318          143.650922   \n",
       "\n",
       "   max_Volume_Agency  min_Volume_SKU  mean_Volume_SKU  max_Volume_SKU  \n",
       "0           425.0628             0.0      3194.051328      22126.6050  \n",
       "1           425.0628             0.0      2208.376728      17624.5200  \n",
       "2         10246.0650             0.0         0.884812         18.9900  \n",
       "3         13462.3950             0.0        33.140397        202.6650  \n",
       "4           425.0628             0.0      1259.238693      10583.6325  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 731,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 732,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_df = pd.DataFrame(data=volume_forecast)\n",
    "test_df['YearMonth'] = 201801\n",
    "# industry_soda_sales.loc[60] = [201801, 885614054]\n",
    "# industry_volume.loc[60] = [201801, 560004016]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_df = pd.merge(volume_forecast, demographics, on='Agency', how='left')\n",
    "test_df = pd.merge(test_df, event_calender, on='YearMonth', how='left')\n",
    "test_df = pd.merge(test_df, agency_agg, on='Agency', how='left')\n",
    "test_df = pd.merge(test_df, sku_agg, on='SKU', how='left')\n",
    "\n",
    "# test_df = pd.merge(test_df, agency_sku_agg, on=['Agency', 'SKU'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 734,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_df_copy = test_df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 735,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency</th>\n",
       "      <th>SKU</th>\n",
       "      <th>Volume</th>\n",
       "      <th>YearMonth</th>\n",
       "      <th>Avg_Population_2017</th>\n",
       "      <th>Avg_Yearly_Household_Income_2017</th>\n",
       "      <th>Easter Day</th>\n",
       "      <th>Good Friday</th>\n",
       "      <th>New Year</th>\n",
       "      <th>Christmas</th>\n",
       "      <th>...</th>\n",
       "      <th>FIFA U-17 World Cup</th>\n",
       "      <th>Football Gold Cup</th>\n",
       "      <th>Beer Capital</th>\n",
       "      <th>Music Fest</th>\n",
       "      <th>min_Volume_Agency</th>\n",
       "      <th>mean_Volume_Agency</th>\n",
       "      <th>max_Volume_Agency</th>\n",
       "      <th>min_Volume_SKU</th>\n",
       "      <th>mean_Volume_SKU</th>\n",
       "      <th>max_Volume_SKU</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Agency_23</td>\n",
       "      <td>SKU_06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>201801</td>\n",
       "      <td>49101</td>\n",
       "      <td>90240</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>131.064589</td>\n",
       "      <td>942.65250</td>\n",
       "      <td>0.648</td>\n",
       "      <td>127.760400</td>\n",
       "      <td>937.44000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Agency_34</td>\n",
       "      <td>SKU_20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>201801</td>\n",
       "      <td>12271</td>\n",
       "      <td>97222</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>3.623409</td>\n",
       "      <td>40.70430</td>\n",
       "      <td>0.000</td>\n",
       "      <td>4.329854</td>\n",
       "      <td>47.31795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Agency_24</td>\n",
       "      <td>SKU_02</td>\n",
       "      <td>NaN</td>\n",
       "      <td>201801</td>\n",
       "      <td>42122</td>\n",
       "      <td>93027</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>119.185946</td>\n",
       "      <td>776.70450</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2208.376728</td>\n",
       "      <td>17624.52000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Agency_40</td>\n",
       "      <td>SKU_06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>201801</td>\n",
       "      <td>143299</td>\n",
       "      <td>137912</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000</td>\n",
       "      <td>49.002228</td>\n",
       "      <td>900.22350</td>\n",
       "      <td>0.648</td>\n",
       "      <td>127.760400</td>\n",
       "      <td>937.44000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Agency_42</td>\n",
       "      <td>SKU_32</td>\n",
       "      <td>NaN</td>\n",
       "      <td>201801</td>\n",
       "      <td>175794</td>\n",
       "      <td>110057</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17.064</td>\n",
       "      <td>440.257746</td>\n",
       "      <td>1981.67025</td>\n",
       "      <td>0.000</td>\n",
       "      <td>25.091122</td>\n",
       "      <td>207.35550</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Agency     SKU  Volume  YearMonth  Avg_Population_2017  \\\n",
       "0  Agency_23  SKU_06     NaN     201801                49101   \n",
       "1  Agency_34  SKU_20     NaN     201801                12271   \n",
       "2  Agency_24  SKU_02     NaN     201801                42122   \n",
       "3  Agency_40  SKU_06     NaN     201801               143299   \n",
       "4  Agency_42  SKU_32     NaN     201801               175794   \n",
       "\n",
       "   Avg_Yearly_Household_Income_2017  Easter Day  Good Friday  New Year  \\\n",
       "0                             90240           0            0         1   \n",
       "1                             97222           0            0         1   \n",
       "2                             93027           0            0         1   \n",
       "3                            137912           0            0         1   \n",
       "4                            110057           0            0         1   \n",
       "\n",
       "   Christmas       ...        FIFA U-17 World Cup  Football Gold Cup  \\\n",
       "0          0       ...                          0                  0   \n",
       "1          0       ...                          0                  0   \n",
       "2          0       ...                          0                  0   \n",
       "3          0       ...                          0                  0   \n",
       "4          0       ...                          0                  0   \n",
       "\n",
       "   Beer Capital  Music Fest  min_Volume_Agency  mean_Volume_Agency  \\\n",
       "0             0           0              0.000          131.064589   \n",
       "1             0           0              0.000            3.623409   \n",
       "2             0           0              0.000          119.185946   \n",
       "3             0           0              0.000           49.002228   \n",
       "4             0           0             17.064          440.257746   \n",
       "\n",
       "   max_Volume_Agency  min_Volume_SKU  mean_Volume_SKU  max_Volume_SKU  \n",
       "0          942.65250           0.648       127.760400       937.44000  \n",
       "1           40.70430           0.000         4.329854        47.31795  \n",
       "2          776.70450           0.000      2208.376728     17624.52000  \n",
       "3          900.22350           0.648       127.760400       937.44000  \n",
       "4         1981.67025           0.000        25.091122       207.35550  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 735,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df_copy.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 736,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1450, 24)"
      ]
     },
     "execution_count": 736,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 737,
   "metadata": {},
   "outputs": [],
   "source": [
    "feat = ['Agency','SKU']\n",
    "\n",
    "for x in feat:\n",
    "    le = LabelEncoder()\n",
    "    le.fit(list(test_df[x].values) + list(train_df[x].values))\n",
    "    train_df[x] = le.transform(list(train_df[x]))\n",
    "    test_df[x] = le.transform(list(test_df[x]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 738,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_df.drop('Volume', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 739,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Agency</th>\n",
       "      <th>SKU</th>\n",
       "      <th>YearMonth</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Avg_Population_2017</th>\n",
       "      <th>Avg_Yearly_Household_Income_2017</th>\n",
       "      <th>Easter Day</th>\n",
       "      <th>Good Friday</th>\n",
       "      <th>New Year</th>\n",
       "      <th>Christmas</th>\n",
       "      <th>...</th>\n",
       "      <th>FIFA U-17 World Cup</th>\n",
       "      <th>Football Gold Cup</th>\n",
       "      <th>Beer Capital</th>\n",
       "      <th>Music Fest</th>\n",
       "      <th>min_Volume_Agency</th>\n",
       "      <th>mean_Volume_Agency</th>\n",
       "      <th>max_Volume_Agency</th>\n",
       "      <th>min_Volume_SKU</th>\n",
       "      <th>mean_Volume_SKU</th>\n",
       "      <th>max_Volume_SKU</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>201301</td>\n",
       "      <td>52.2720</td>\n",
       "      <td>48151</td>\n",
       "      <td>132110</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.1318</td>\n",
       "      <td>143.650922</td>\n",
       "      <td>425.0628</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3194.051328</td>\n",
       "      <td>22126.6050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>201301</td>\n",
       "      <td>110.7000</td>\n",
       "      <td>48151</td>\n",
       "      <td>132110</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.1318</td>\n",
       "      <td>143.650922</td>\n",
       "      <td>425.0628</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2208.376728</td>\n",
       "      <td>17624.5200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>55</td>\n",
       "      <td>17</td>\n",
       "      <td>201301</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1620969</td>\n",
       "      <td>105857</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1771.901852</td>\n",
       "      <td>10246.0650</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.884812</td>\n",
       "      <td>18.9900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>45</td>\n",
       "      <td>6</td>\n",
       "      <td>201301</td>\n",
       "      <td>28.3200</td>\n",
       "      <td>1739969</td>\n",
       "      <td>210213</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1997.797814</td>\n",
       "      <td>13462.3950</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33.140397</td>\n",
       "      <td>202.6650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19</td>\n",
       "      <td>4</td>\n",
       "      <td>201301</td>\n",
       "      <td>238.5387</td>\n",
       "      <td>48151</td>\n",
       "      <td>132110</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.1318</td>\n",
       "      <td>143.650922</td>\n",
       "      <td>425.0628</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1259.238693</td>\n",
       "      <td>10583.6325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Agency  SKU  YearMonth    Volume  Avg_Population_2017  \\\n",
       "0      19    0     201301   52.2720                48151   \n",
       "1      19    1     201301  110.7000                48151   \n",
       "2      55   17     201301    0.0000              1620969   \n",
       "3      45    6     201301   28.3200              1739969   \n",
       "4      19    4     201301  238.5387                48151   \n",
       "\n",
       "   Avg_Yearly_Household_Income_2017  Easter Day  Good Friday  New Year  \\\n",
       "0                            132110           0            0         1   \n",
       "1                            132110           0            0         1   \n",
       "2                            105857           0            0         1   \n",
       "3                            210213           0            0         1   \n",
       "4                            132110           0            0         1   \n",
       "\n",
       "   Christmas       ...        FIFA U-17 World Cup  Football Gold Cup  \\\n",
       "0          0       ...                          0                  0   \n",
       "1          0       ...                          0                  0   \n",
       "2          0       ...                          0                  0   \n",
       "3          0       ...                          0                  0   \n",
       "4          0       ...                          0                  0   \n",
       "\n",
       "   Beer Capital  Music Fest  min_Volume_Agency  mean_Volume_Agency  \\\n",
       "0             0           0            23.1318          143.650922   \n",
       "1             0           0            23.1318          143.650922   \n",
       "2             0           0             0.0000         1771.901852   \n",
       "3             0           0             0.0000         1997.797814   \n",
       "4             0           0            23.1318          143.650922   \n",
       "\n",
       "   max_Volume_Agency  min_Volume_SKU  mean_Volume_SKU  max_Volume_SKU  \n",
       "0           425.0628             0.0      3194.051328      22126.6050  \n",
       "1           425.0628             0.0      2208.376728      17624.5200  \n",
       "2         10246.0650             0.0         0.884812         18.9900  \n",
       "3         13462.3950             0.0        33.140397        202.6650  \n",
       "4           425.0628             0.0      1259.238693      10583.6325  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 739,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 740,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Agency', 'SKU', 'YearMonth', 'Volume', 'Avg_Population_2017',\n",
       "       'Avg_Yearly_Household_Income_2017', 'Easter Day', 'Good Friday',\n",
       "       'New Year', 'Christmas', 'Labor Day', 'Independence Day',\n",
       "       'Revolution Day Memorial', 'Regional Games ', 'FIFA U-17 World Cup',\n",
       "       'Football Gold Cup', 'Beer Capital', 'Music Fest', 'min_Volume_Agency',\n",
       "       'mean_Volume_Agency', 'max_Volume_Agency', 'min_Volume_SKU',\n",
       "       'mean_Volume_SKU', 'max_Volume_SKU'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 740,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 741,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "cols = ['Agency', 'SKU', 'YearMonth', 'Avg_Population_2017',\n",
    "       'Avg_Yearly_Household_Income_2017', 'Easter Day', 'Good Friday',\n",
    "       'New Year', 'Christmas', 'Labor Day', 'Independence Day',\n",
    "       'Revolution Day Memorial', 'Regional Games ', 'FIFA U-17 World Cup',\n",
    "       'Football Gold Cup', 'Beer Capital', 'Music Fest', 'min_Volume_Agency',\n",
    "       'mean_Volume_Agency', 'max_Volume_Agency', 'min_Volume_SKU',\n",
    "       'mean_Volume_SKU', 'max_Volume_SKU']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 742,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 742,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "find_nan_cols(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 743,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set has 15750 samples.\n",
      "Testing set has 5250 samples.\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split the 'features' and 'income' data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(train_df[cols], \n",
    "                                                    train_df['Volume'], \n",
    "                                                    test_size = 0.25, \n",
    "                                                    random_state = 77)\n",
    "\n",
    "# Show the results of the split\n",
    "print(\"Training set has {} samples.\".format(X_train.shape[0]))\n",
    "print(\"Testing set has {} samples.\".format(X_test.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import XGBRegressor\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from lightgbm import LGBMRegressor\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, AdaBoostRegressor, BaggingRegressor\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "clf_A = ExtraTreesRegressor(random_state=77, n_jobs=-1, max_depth=25, n_estimators=18, min_samples_split=6, \n",
    "                           max_leaf_nodes=10000)\n",
    "clf_C = BaggingRegressor(random_state=77, n_estimators=250, n_jobs=-1)\n",
    "clf_D = LGBMRegressor(n_jobs=-1, random_state=77, num_leaves=95)\n",
    "#clf_E = RandomForestRegressor(random_state=77, n_jobs=-1, n_estimators=250)\n",
    "clf_E = XGBRegressor(n_estimators=500, max_depth=8, learning_rate= 0.1, min_child_weight=5)\n",
    "\n",
    "\n",
    "clf_A.fit(X_train, y_train)\n",
    "#clf_C.fit(X_train, y_train)\n",
    "#clf_D.fit(X_train, y_train)\n",
    "clf_E.fit(X_train, y_train)\n",
    "\n",
    "preds1 = clf_A.predict(X_test)\n",
    "#preds3 = clf_C.predict(X_test)\n",
    "#preds4 = clf_D.predict(X_test)\n",
    "preds5 = clf_E.predict(X_test)\n",
    "\n",
    "print('{} has precision: {}'.format(clf_A.__class__.__name__, RMSLE((y_test), (preds1))))\n",
    "#print('{} has precision: {}'.format(clf_C.__class__.__name__, r2_score(y_test, preds3)))\n",
    "#print('{} has precision: {}'.format(clf_D.__class__.__name__, r2_score(y_test, preds4)))\n",
    "print('{} has precision: {}'.format(clf_E.__class__.__name__, RMSLE(y_test, preds5)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "preds1 = clf_A.predict(test_df)\n",
    "preds5 = clf_E.predict(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "preds = (preds1+preds5)/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "preds = np.where(preds<0.0,0,preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub = pd.DataFrame()\n",
    "sub = pd.concat([test_df_copy[['Agency', 'SKU']], pd.Series(preds)], axis=1)\n",
    "sub = sub.rename(columns={0:'Volume'})\n",
    "sub[['Volume']] = sub[['Volume']].apply(pd.to_numeric)\n",
    "sub.to_csv('volume_forecast.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
